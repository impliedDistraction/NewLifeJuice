---
// Authentication Component for Supabase Integration
// Supports both login and registration with role-based access
---

<div id="authSystem" class="fixed inset-0 bg-gray-900 bg-opacity-75 flex items-center justify-center z-50">
    <div class="bg-white p-8 rounded-xl shadow-2xl max-w-md w-full mx-4">
        <!-- Auth Toggle -->
        <div class="flex mb-6 bg-gray-100 rounded-lg p-1">
            <button 
                id="loginTab" 
                class="flex-1 py-2 px-4 rounded-md text-sm font-medium transition-all duration-200 bg-white text-gray-900 shadow-sm"
                onclick="switchAuthMode('login')"
            >
                Sign In
            </button>
            <button 
                id="registerTab" 
                class="flex-1 py-2 px-4 rounded-md text-sm font-medium transition-all duration-200 text-gray-600 hover:text-gray-900"
                onclick="switchAuthMode('register')"
            >
                Register
            </button>
        </div>

        <!-- Login Form -->
        <div id="loginForm" class="auth-form">
            <div class="text-center mb-6">
                <div class="w-16 h-16 bg-gradient-to-r from-green-500 to-blue-500 rounded-full flex items-center justify-center mx-auto mb-4">
                    <i class="fas fa-leaf text-white text-xl"></i>
                </div>
                <h2 class="text-2xl font-bold text-gray-900">Welcome Back</h2>
                <p class="text-gray-600">Sign in to your admin dashboard</p>
            </div>
            
            <form id="loginFormElement" class="space-y-4">
                <div>
                    <label for="loginEmail" class="block text-sm font-medium text-gray-700 mb-1">Email</label>
                    <input 
                        type="email" 
                        id="loginEmail" 
                        required
                        placeholder="admin@newlifejuice.com"
                        class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent"
                    >
                </div>
                
                <div>
                    <label for="loginPassword" class="block text-sm font-medium text-gray-700 mb-1">Password</label>
                    <input 
                        type="password" 
                        id="loginPassword" 
                        required
                        placeholder="Your password"
                        class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent"
                    >
                </div>
                
                <button 
                    type="submit"
                    class="w-full bg-green-600 text-white py-3 rounded-lg hover:bg-green-700 transition-colors font-semibold disabled:opacity-50 disabled:cursor-not-allowed"
                    id="loginButton"
                >
                    <span class="button-text">Sign In</span>
                    <i class="fas fa-spinner fa-spin hidden ml-2"></i>
                </button>
            </form>
        </div>

        <!-- Registration Form -->
        <div id="registerForm" class="auth-form hidden">
            <div class="text-center mb-6">
                <div class="w-16 h-16 bg-gradient-to-r from-purple-500 to-pink-500 rounded-full flex items-center justify-center mx-auto mb-4">
                    <i class="fas fa-user-plus text-white text-xl"></i>
                </div>
                <h2 class="text-2xl font-bold text-gray-900">Create Account</h2>
                <p class="text-gray-600">Join the admin team</p>
            </div>
            
            <form id="registerFormElement" class="space-y-4">
                <div class="grid grid-cols-2 gap-4">
                    <div>
                        <label for="firstName" class="block text-sm font-medium text-gray-700 mb-1">First Name</label>
                        <input 
                            type="text" 
                            id="firstName" 
                            required
                            placeholder="John"
                            class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                        >
                    </div>
                    <div>
                        <label for="lastName" class="block text-sm font-medium text-gray-700 mb-1">Last Name</label>
                        <input 
                            type="text" 
                            id="lastName" 
                            required
                            placeholder="Doe"
                            class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                        >
                    </div>
                </div>
                
                <div>
                    <label for="registerEmail" class="block text-sm font-medium text-gray-700 mb-1">Email</label>
                    <input 
                        type="email" 
                        id="registerEmail" 
                        required
                        placeholder="admin@newlifejuice.com"
                        class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                    >
                </div>
                
                <div>
                    <label for="registerPassword" class="block text-sm font-medium text-gray-700 mb-1">Password</label>
                    <input 
                        type="password" 
                        id="registerPassword" 
                        required
                        placeholder="Strong password (8+ characters)"
                        class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                    >
                    <p class="text-xs text-gray-500 mt-1">Minimum 8 characters with letters and numbers</p>
                </div>
                
                <div>
                    <label for="userRole" class="block text-sm font-medium text-gray-700 mb-1">Role</label>
                    <select 
                        id="userRole"
                        class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                    >
                        <option value="admin">Admin (Full Access)</option>
                        <option value="editor">Editor (Content Only)</option>
                        <option value="viewer">Viewer (Read Only)</option>
                    </select>
                </div>
                
                <button 
                    type="submit"
                    class="w-full bg-purple-600 text-white py-3 rounded-lg hover:bg-purple-700 transition-colors font-semibold disabled:opacity-50 disabled:cursor-not-allowed"
                    id="registerButton"
                >
                    <span class="button-text">Create Account</span>
                    <i class="fas fa-spinner fa-spin hidden ml-2"></i>
                </button>
            </form>
        </div>

        <!-- Error/Success Messages -->
        <div id="authMessage" class="mt-4 text-sm text-center hidden">
            <div id="authMessageContent" class="p-3 rounded-lg"></div>
        </div>

        <!-- Development Helper -->
        <div class="mt-6 pt-4 border-t border-gray-200">
            <p class="text-xs text-gray-500 text-center">
                ðŸš€ <strong>Development Mode:</strong> Register first admin user or use existing credentials
            </p>
            <div class="flex justify-center mt-2">
                <button 
                    onclick="createDemoAdmin()"
                    class="text-xs text-blue-600 hover:text-blue-800 underline"
                >
                    Create Demo Admin Account
                </button>
            </div>
        </div>
    </div>
</div>

<style>
    .auth-form {
        transition: all 0.3s ease;
    }
    
    .auth-form.hidden {
        opacity: 0;
        transform: translateX(20px);
    }
    
    .button-loading {
        opacity: 0.7;
        cursor: not-allowed;
    }
</style>

<script>
    let currentAuthMode = 'login';

    // Switch between login and register modes
    window.switchAuthMode = function(mode) {
        currentAuthMode = mode;
        
        const loginForm = document.getElementById('loginForm');
        const registerForm = document.getElementById('registerForm');
        const loginTab = document.getElementById('loginTab');
        const registerTab = document.getElementById('registerTab');
        
        if (mode === 'login') {
            loginForm.classList.remove('hidden');
            registerForm.classList.add('hidden');
            loginTab.className = 'flex-1 py-2 px-4 rounded-md text-sm font-medium transition-all duration-200 bg-white text-gray-900 shadow-sm';
            registerTab.className = 'flex-1 py-2 px-4 rounded-md text-sm font-medium transition-all duration-200 text-gray-600 hover:text-gray-900';
        } else {
            loginForm.classList.add('hidden');
            registerForm.classList.remove('hidden');
            loginTab.className = 'flex-1 py-2 px-4 rounded-md text-sm font-medium transition-all duration-200 text-gray-600 hover:text-gray-900';
            registerTab.className = 'flex-1 py-2 px-4 rounded-md text-sm font-medium transition-all duration-200 bg-white text-gray-900 shadow-sm';
        }
        
        // Clear any messages
        hideAuthMessage();
    }

    // Show message with type (success, error, info)
    window.showAuthMessage = function(message, type = 'info') {
        const messageDiv = document.getElementById('authMessage');
        const messageContent = document.getElementById('authMessageContent');
        
        let bgColor = 'bg-blue-50 text-blue-700 border border-blue-200';
        let icon = 'fas fa-info-circle';
        
        if (type === 'success') {
            bgColor = 'bg-green-50 text-green-700 border border-green-200';
            icon = 'fas fa-check-circle';
        } else if (type === 'error') {
            bgColor = 'bg-red-50 text-red-700 border border-red-200';
            icon = 'fas fa-exclamation-circle';
        }
        
        messageContent.className = `p-3 rounded-lg ${bgColor}`;
        messageContent.innerHTML = `<i class="${icon} mr-2"></i>${message}`;
        messageDiv.classList.remove('hidden');
    }

    window.hideAuthMessage = function() {
        document.getElementById('authMessage').classList.add('hidden');
    }

    // Set button loading state
    window.setButtonLoading = function(buttonId, loading) {
        const button = document.getElementById(buttonId);
        const buttonText = button.querySelector('.button-text');
        const spinner = button.querySelector('.fa-spinner');
        
        if (loading) {
            button.disabled = true;
            button.classList.add('button-loading');
            spinner.classList.remove('hidden');
        } else {
            button.disabled = false;
            button.classList.remove('button-loading');
            spinner.classList.add('hidden');
        }
    }

    // Handle login
    window.handleLogin = async function(email, password) {
        setButtonLoading('loginButton', true);
        hideAuthMessage();
        
        try {
            const response = await fetch('/api/auth', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    action: 'login',
                    email,
                    password
                })
            });

            const data = await response.json();

            if (data.success) {
                showAuthMessage('Login successful! Welcome back.', 'success');
                
                // Store session data
                localStorage.setItem('supabase_session', JSON.stringify(data.session));
                localStorage.setItem('supabase_user', JSON.stringify(data.user));
                localStorage.setItem('user_profile', JSON.stringify(data.profile));
                
                // Hide auth system and show dashboard
                setTimeout(() => {
                    document.getElementById('authSystem').style.display = 'none';
                    document.getElementById('dashboard').classList.remove('hidden');
                    
                    // Trigger dashboard initialization
                    if (window.initializeDashboard) {
                        window.initializeDashboard(data.user, data.profile);
                    }
                }, 1000);
            } else {
                showAuthMessage(data.message || 'Login failed. Please check your credentials.', 'error');
            }
        } catch (error) {
            console.error('Login error:', error);
            showAuthMessage('Network error. Please try again.', 'error');
        } finally {
            setButtonLoading('loginButton', false);
        }
    }

    // Handle registration
    window.handleRegister = async function(firstName, lastName, email, password, role) {
        setButtonLoading('registerButton', true);
        hideAuthMessage();
        
        try {
            const response = await fetch('/api/auth', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    action: 'register',
                    firstName,
                    lastName,
                    email,
                    password,
                    role
                })
            });

            const data = await response.json();

            if (data.success) {
                showAuthMessage(data.message || 'Registration successful! Please check your email.', 'success');
                
                // Switch to login mode after successful registration
                setTimeout(() => {
                    switchAuthMode('login');
                    document.getElementById('loginEmail').value = email;
                }, 2000);
            } else {
                showAuthMessage(data.message || 'Registration failed. Please try again.', 'error');
            }
        } catch (error) {
            console.error('Registration error:', error);
            showAuthMessage('Network error. Please try again.', 'error');
        } finally {
            setButtonLoading('registerButton', false);
        }
    }

    // Create demo admin account (development helper)
    window.createDemoAdmin = async function() {
        const confirmed = confirm('Create demo admin account?\n\nEmail: admin@newlifejuice.com\nPassword: Admin123!');
        if (!confirmed) return;
        
        await handleRegister(
            'Demo', 
            'Admin', 
            'admin@newlifejuice.com', 
            'Admin123!', 
            'admin'
        );
    }

    // Initialize form event listeners
    document.addEventListener('DOMContentLoaded', function() {
        // Login form
        document.getElementById('loginFormElement').addEventListener('submit', function(e) {
            e.preventDefault();
            const email = document.getElementById('loginEmail').value;
            const password = document.getElementById('loginPassword').value;
            handleLogin(email, password);
        });

        // Register form
        document.getElementById('registerFormElement').addEventListener('submit', function(e) {
            e.preventDefault();
            const firstName = document.getElementById('firstName').value;
            const lastName = document.getElementById('lastName').value;
            const email = document.getElementById('registerEmail').value;
            const password = document.getElementById('registerPassword').value;
            const role = document.getElementById('userRole').value;
            
            // Basic validation
            if (password.length < 8) {
                showAuthMessage('Password must be at least 8 characters long.', 'error');
                return;
            }
            
            handleRegister(firstName, lastName, email, password, role);
        });
    });
</script>
