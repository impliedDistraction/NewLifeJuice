---
import { createClient } from '@supabase/supabase-js';

// Basic auth check
const { user } = Astro.locals;

if (!user) {
  return Astro.redirect('/admin/');
}

// Initialize Supabase client for server-side operations
const supabaseUrl = import.meta.env.PUBLIC_SUPABASE_URL;
const supabaseAnonKey = import.meta.env.PUBLIC_SUPABASE_ANON_KEY;
const supabase = createClient(supabaseUrl, supabaseAnonKey);

// Fetch initial data for dashboard
const { data: clients } = await supabase
  .from('clients')
  .select('*')
  .order('name');

const { data: products } = await supabase
  .from('products')
  .select('*')
  .order('name');

const { data: content } = await supabase
  .from('content')
  .select('*')
  .order('updated_at', { ascending: false });

// Get user's client access (for multi-tenant)
const { data: userClient } = await supabase
  .from('client_users')
  .select('client_id, clients(*)')
  .eq('user_id', user.id)
  .single();

const isOwner = user.email === 'platform@example.com'; // Platform owner check
---

<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>Admin Dashboard - New Life Juice</title>
    <script src="//unpkg.com/alpinejs" defer></script>
    <style>
        /* Custom Dashboard Styles */
        .tab-active {
            background: linear-gradient(135deg, #10b981, #047857);
            color: white;
            box-shadow: 0 4px 14px 0 rgba(16, 185, 129, 0.4);
        }
        
        .tab-inactive {
            background: #f3f4f6;
            color: #6b7280;
            border: 1px solid #e5e7eb;
        }
        
        .tab-inactive:hover {
            background: #e5e7eb;
            color: #374151;
        }
        
        .modal-backdrop {
            background-color: rgba(0, 0, 0, 0.5);
        }
        
        .modal-content {
            background: white;
            border-radius: 12px;
            box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.25);
        }
        
        .btn-primary {
            background: linear-gradient(135deg, #10b981, #047857);
            color: white;
            border: none;
            padding: 0.75rem 1.5rem;
            border-radius: 8px;
            font-weight: 600;
            transition: all 0.3s ease;
        }
        
        .btn-primary:hover {
            background: linear-gradient(135deg, #047857, #065f46);
            transform: translateY(-1px);
            box-shadow: 0 10px 25px -5px rgba(16, 185, 129, 0.4);
        }
        
        .btn-secondary {
            background: #f3f4f6;
            color: #374151;
            border: 1px solid #d1d5db;
            padding: 0.75rem 1.5rem;
            border-radius: 8px;
            font-weight: 500;
            transition: all 0.3s ease;
        }
        
        .btn-secondary:hover {
            background: #e5e7eb;
            border-color: #9ca3af;
        }
        
        .card {
            background: white;
            border-radius: 12px;
            border: 1px solid #e5e7eb;
            box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
            transition: all 0.3s ease;
        }
        
        .card:hover {
            box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1);
            transform: translateY(-2px);
        }
        
        .fade-in {
            animation: fadeIn 0.3s ease-in;
        }
        
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(10px); }
            to { opacity: 1; transform: translateY(0); }
        }
    </style>
</head>
<body class="bg-gray-50 min-h-screen">
    <div 
        x-data="{
            activeTab: 'overview',
            showModal: false,
            modalType: '',
            editItem: null,
            loading: false,
            
            // Data stores
            clients: [],
            products: [],
            content: [],
            
            // Form data
            form: {},
            
            // Initialize data
            async init() {
                // Set initial data from server
                this.clients = JSON.parse(document.getElementById('clients-data').textContent);
                this.products = JSON.parse(document.getElementById('products-data').textContent);
                this.content = JSON.parse(document.getElementById('content-data').textContent);
            },
            
            // Modal management
            openModal(type, item = null) {
                this.modalType = type;
                this.editItem = item;
                this.form = item ? {...item} : {};
                this.showModal = true;
            },
            
            closeModal() {
                this.showModal = false;
                this.modalType = '';
                this.editItem = null;
                this.form = {};
            },
            
            // CRUD operations
            async saveItem() {
                this.loading = true;
                try {
                    let endpoint = '';
                    if (this.modalType === 'products') {
                        endpoint = '/api/product-catalog';
                    } else if (this.modalType === 'content') {
                        endpoint = '/api/content';
                    } else if (this.modalType === 'clients') {
                        endpoint = '/api/clients';
                    }
                    
                    const method = this.editItem ? 'PUT' : 'POST';
                    
                    const response = await fetch(endpoint, {
                        method,
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify(this.form)
                    });
                    
                    if (response.ok) {
                        const result = await response.json();
                        
                        // Update local data
                        if (this.editItem) {
                            const index = this[this.modalType].findIndex(item => item.id === this.editItem.id);
                            this[this.modalType][index] = result;
                        } else {
                            this[this.modalType].push(result);
                        }
                        
                        this.closeModal();
                        this.showNotification('Item saved successfully!', 'success');
                    } else {
                        throw new Error('Failed to save item');
                    }
                } catch (error) {
                    console.error('Error saving item:', error);
                    this.showNotification('Error saving item', 'error');
                } finally {
                    this.loading = false;
                }
            },
            
            async deleteItem(type, id) {
                if (!confirm('Are you sure you want to delete this item?')) return;
                
                try {
                    let endpoint = '';
                    if (type === 'products') {
                        endpoint = `/api/product-catalog/${id}`;
                    } else if (type === 'content') {
                        endpoint = `/api/content/${id}`;
                    } else if (type === 'clients') {
                        endpoint = `/api/clients/${id}`;
                    }
                    
                    const response = await fetch(endpoint, {
                        method: 'DELETE'
                    });
                    
                    if (response.ok) {
                        this[type] = this[type].filter(item => item.id !== id);
                        this.showNotification('Item deleted successfully!', 'success');
                    } else {
                        throw new Error('Failed to delete item');
                    }
                } catch (error) {
                    console.error('Error deleting item:', error);
                    this.showNotification('Error deleting item', 'error');
                }
            },
            
            // Notifications
            showNotification(message, type) {
                // Simple notification implementation
                const notification = document.createElement('div');
                notification.className = `fixed top-4 right-4 p-4 rounded-lg text-white z-50 ${
                    type === 'success' ? 'bg-green-500' : 'bg-red-500'
                }`;
                notification.textContent = message;
                document.body.appendChild(notification);
                
                setTimeout(() => {
                    notification.remove();
                }, 3000);
            }
        }"
        x-init="init()"
        class="container mx-auto px-4 py-8"
    >
        <!-- Hidden data elements for Alpine.js -->
        <script type="application/json" id="clients-data">{JSON.stringify(clients || [])}</script>
        <script type="application/json" id="products-data">{JSON.stringify(products || [])}</script>
        <script type="application/json" id="content-data">{JSON.stringify(content || [])}</script>

        <!-- Header -->
        <div class="mb-8">
            <div class="flex justify-between items-center">
                <div>
                    <h1 class="text-3xl font-bold text-gray-900">Admin Dashboard</h1>
                    <p class="text-gray-600 mt-1">Welcome back, {user.email}</p>
                </div>
                <div class="flex space-x-4">
                    <a href="/" class="btn-secondary">View Site</a>
                    <a href="/admin/logout" class="btn-secondary">Logout</a>
                </div>
            </div>
        </div>

        <!-- Navigation Tabs -->
        <div class="mb-8">
            <div class="flex space-x-2 bg-white p-2 rounded-lg border border-gray-200">
                <button 
                    @click="activeTab = 'overview'"
                    :class="activeTab === 'overview' ? 'tab-active' : 'tab-inactive'"
                    class="px-4 py-2 rounded-md font-medium transition-all duration-200"
                >
                    Overview
                </button>
                {isOwner && (
                    <button 
                        @click="activeTab = 'clients'"
                        :class="activeTab === 'clients' ? 'tab-active' : 'tab-inactive'"
                        class="px-4 py-2 rounded-md font-medium transition-all duration-200"
                    >
                        Clients
                    </button>
                )}
                <button 
                    @click="activeTab = 'products'"
                    :class="activeTab === 'products' ? 'tab-active' : 'tab-inactive'"
                    class="px-4 py-2 rounded-md font-medium transition-all duration-200"
                >
                    Products
                </button>
                <button 
                    @click="activeTab = 'content'"
                    :class="activeTab === 'content' ? 'tab-active' : 'tab-inactive'"
                    class="px-4 py-2 rounded-md font-medium transition-all duration-200"
                >
                    Content
                </button>
            </div>
        </div>

        <!-- Overview Tab -->
        <div x-show="activeTab === 'overview'" class="fade-in">
            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-8">
                <!-- Stats Cards -->
                <div class="card p-6">
                    <div class="flex items-center">
                        <div class="p-3 rounded-full bg-blue-100 text-blue-600">
                            <svg class="w-6 h-6" fill="currentColor" viewBox="0 0 20 20">
                                <path d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"/>
                            </svg>
                        </div>
                        <div class="ml-4">
                            <h3 class="text-sm font-medium text-gray-500">Total Products</h3>
                            <p class="text-2xl font-semibold text-gray-900" x-text="products.length"></p>
                        </div>
                    </div>
                </div>

                {isOwner && (
                    <div class="card p-6">
                        <div class="flex items-center">
                            <div class="p-3 rounded-full bg-green-100 text-green-600">
                                <svg class="w-6 h-6" fill="currentColor" viewBox="0 0 20 20">
                                    <path d="M13 6a3 3 0 11-6 0 3 3 0 016 0zM18 8a2 2 0 11-4 0 2 2 0 014 0zM14 15a4 4 0 00-8 0v3h8v-3z"/>
                                </svg>
                            </div>
                            <div class="ml-4">
                                <h3 class="text-sm font-medium text-gray-500">Active Clients</h3>
                                <p class="text-2xl font-semibold text-gray-900" x-text="clients.length"></p>
                            </div>
                        </div>
                    </div>
                )}

                <div class="card p-6">
                    <div class="flex items-center">
                        <div class="p-3 rounded-full bg-purple-100 text-purple-600">
                            <svg class="w-6 h-6" fill="currentColor" viewBox="0 0 20 20">
                                <path d="M9 2a1 1 0 000 2h2a1 1 0 100-2H9z"/>
                                <path fill-rule="evenodd" d="M4 5a2 2 0 012-2v1a1 1 0 102 0V3a2 2 0 012 2v6a2 2 0 01-2 2H6a2 2 0 01-2-2V5zm3 2a1 1 0 000 2h.01a1 1 0 100-2H7zm3 0a1 1 0 000 2h3a1 1 0 100-2h-3zm-3 4a1 1 0 100 2h.01a1 1 0 100-2H7zm3 0a1 1 0 100 2h3a1 1 0 100-2h-3z"/>
                            </svg>
                        </div>
                        <div class="ml-4">
                            <h3 class="text-sm font-medium text-gray-500">Content Blocks</h3>
                            <p class="text-2xl font-semibold text-gray-900" x-text="content.length"></p>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Quick Actions -->
            <div class="card p-6">
                <h3 class="text-lg font-semibold text-gray-900 mb-4">Quick Actions</h3>
                <div class="flex flex-wrap gap-4">
                    <button 
                        @click="openModal('products')"
                        class="btn-primary"
                    >
                        Add New Product
                    </button>
                    <button 
                        @click="openModal('content')"
                        class="btn-primary"
                    >
                        Create Content Block
                    </button>
                    {isOwner && (
                        <button 
                            @click="openModal('clients')"
                            class="btn-primary"
                        >
                            Add New Client
                        </button>
                    )}
                </div>
            </div>
        </div>

        <!-- Clients Tab (Owner Only) -->
        {isOwner && (
            <div x-show="activeTab === 'clients'" class="fade-in">
                <div class="flex justify-between items-center mb-6">
                    <h2 class="text-xl font-semibold text-gray-900">Client Management</h2>
                    <button @click="openModal('clients')" class="btn-primary">
                        Add New Client
                    </button>
                </div>

                <div class="grid gap-4">
                    <template x-for="client in clients" :key="client.id">
                        <div class="card p-6">
                            <div class="flex justify-between items-start">
                                <div class="flex-1">
                                    <h3 class="text-lg font-semibold text-gray-900" x-text="client.name"></h3>
                                    <p class="text-gray-600" x-text="client.domain"></p>
                                    <div class="mt-2">
                                        <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800" x-text="client.status"></span>
                                    </div>
                                </div>
                                <div class="flex space-x-2 ml-4">
                                    <button 
                                        @click="openModal('clients', client)"
                                        class="btn-secondary text-sm"
                                    >
                                        Edit
                                    </button>
                                    <button 
                                        @click="deleteItem('clients', client.id)"
                                        class="btn-secondary text-sm text-red-600"
                                    >
                                        Delete
                                    </button>
                                </div>
                            </div>
                        </div>
                    </template>
                </div>
            </div>
        )}

        <!-- Products Tab -->
        <div x-show="activeTab === 'products'" class="fade-in">
            <div class="flex justify-between items-center mb-6">
                <h2 class="text-xl font-semibold text-gray-900">Product Management</h2>
                <button @click="openModal('products')" class="btn-primary">
                    Add New Product
                </button>
            </div>

            <div class="grid gap-4">
                <template x-for="product in products" :key="product.id">
                    <div class="card p-6">
                        <div class="flex justify-between items-start">
                            <div class="flex-1">
                                <h3 class="text-lg font-semibold text-gray-900" x-text="product.name"></h3>
                                <p class="text-gray-600" x-text="product.description"></p>
                                <div class="mt-2 flex items-center space-x-4">
                                    <span class="text-lg font-bold text-green-600" x-text="'$' + product.price"></span>
                                    <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800" x-text="product.category"></span>
                                </div>
                            </div>
                            <div class="flex space-x-2 ml-4">
                                <button 
                                    @click="openModal('products', product)"
                                    class="btn-secondary text-sm"
                                >
                                    Edit
                                </button>
                                <button 
                                    @click="deleteItem('products', product.id)"
                                    class="btn-secondary text-sm text-red-600"
                                >
                                    Delete
                                </button>
                            </div>
                        </div>
                    </div>
                </template>
            </div>
        </div>

        <!-- Content Tab -->
        <div x-show="activeTab === 'content'" class="fade-in">
            <div class="flex justify-between items-center mb-6">
                <h2 class="text-xl font-semibold text-gray-900">Content Management</h2>
                <button @click="openModal('content')" class="btn-primary">
                    Create Content Block
                </button>
            </div>

            <div class="grid gap-4">
                <template x-for="item in content" :key="item.id">
                    <div class="card p-6">
                        <div class="flex justify-between items-start">
                            <div class="flex-1">
                                <h3 class="text-lg font-semibold text-gray-900" x-text="item.title"></h3>
                                <p class="text-gray-600" x-text="item.content_type"></p>
                                <p class="text-sm text-gray-500 mt-2" x-text="item.content.substring(0, 100) + '...'"></p>
                            </div>
                            <div class="flex space-x-2 ml-4">
                                <button 
                                    @click="openModal('content', item)"
                                    class="btn-secondary text-sm"
                                >
                                    Edit
                                </button>
                                <button 
                                    @click="deleteItem('content', item.id)"
                                    class="btn-secondary text-sm text-red-600"
                                >
                                    Delete
                                </button>
                            </div>
                        </div>
                    </div>
                </template>
            </div>
        </div>

        <!-- Universal Modal -->
        <div 
            x-show="showModal" 
            class="fixed inset-0 z-50 overflow-y-auto"
            x-transition:enter="transition ease-out duration-300"
            x-transition:enter-start="opacity-0"
            x-transition:enter-end="opacity-100"
            x-transition:leave="transition ease-in duration-200"
            x-transition:leave-start="opacity-100"
            x-transition:leave-end="opacity-0"
        >
            <div class="flex items-center justify-center min-h-screen px-4">
                <div class="modal-backdrop fixed inset-0" @click="closeModal()"></div>
                
                <div class="modal-content relative w-full max-w-md p-6">
                    <div class="flex justify-between items-center mb-4">
                        <h3 class="text-lg font-semibold text-gray-900" 
                            x-text="(editItem ? 'Edit' : 'Add') + ' ' + modalType.charAt(0).toUpperCase() + modalType.slice(1)">
                        </h3>
                        <button @click="closeModal()" class="text-gray-400 hover:text-gray-600">
                            <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                            </svg>
                        </button>
                    </div>

                    <!-- Dynamic Form Content -->
                    <form @submit.prevent="saveItem()">
                        <!-- Client Form -->
                        <div x-show="modalType === 'clients'">
                            <div class="space-y-4">
                                <div>
                                    <label class="block text-sm font-medium text-gray-700">Name</label>
                                    <input type="text" x-model="form.name" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-green-500 focus:ring-green-500">
                                </div>
                                <div>
                                    <label class="block text-sm font-medium text-gray-700">Domain</label>
                                    <input type="text" x-model="form.domain" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-green-500 focus:ring-green-500">
                                </div>
                            </div>
                        </div>

                        <!-- Product Form -->
                        <div x-show="modalType === 'products'">
                            <div class="space-y-4">
                                <div>
                                    <label class="block text-sm font-medium text-gray-700">Name</label>
                                    <input type="text" x-model="form.name" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-green-500 focus:ring-green-500">
                                </div>
                                <div>
                                    <label class="block text-sm font-medium text-gray-700">Description</label>
                                    <textarea x-model="form.description" rows="3" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-green-500 focus:ring-green-500"></textarea>
                                </div>
                                <div>
                                    <label class="block text-sm font-medium text-gray-700">Price</label>
                                    <input type="number" x-model="form.price" step="0.01" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-green-500 focus:ring-green-500">
                                </div>
                                <div>
                                    <label class="block text-sm font-medium text-gray-700">Category</label>
                                    <select x-model="form.category" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-green-500 focus:ring-green-500">
                                        <option value="juice">Juice</option>
                                        <option value="smoothie">Smoothie</option>
                                        <option value="supplement">Supplement</option>
                                    </select>
                                </div>
                            </div>
                        </div>

                        <!-- Content Form -->
                        <div x-show="modalType === 'content'">
                            <div class="space-y-4">
                                <div>
                                    <label class="block text-sm font-medium text-gray-700">Title</label>
                                    <input type="text" x-model="form.title" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-green-500 focus:ring-green-500">
                                </div>
                                <div>
                                    <label class="block text-sm font-medium text-gray-700">Type</label>
                                    <select x-model="form.content_type" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-green-500 focus:ring-green-500">
                                        <option value="hero">Hero Section</option>
                                        <option value="about">About Section</option>
                                        <option value="testimonial">Testimonial</option>
                                        <option value="feature">Feature Block</option>
                                    </select>
                                </div>
                                <div>
                                    <label class="block text-sm font-medium text-gray-700">Content</label>
                                    <textarea x-model="form.content" rows="4" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-green-500 focus:ring-green-500"></textarea>
                                </div>
                            </div>
                        </div>

                        <!-- Form Actions -->
                        <div class="flex justify-end space-x-3 mt-6">
                            <button type="button" @click="closeModal()" class="btn-secondary">
                                Cancel
                            </button>
                            <button 
                                type="submit" 
                                class="btn-primary"
                                :disabled="loading"
                                x-text="loading ? 'Saving...' : 'Save'"
                            >
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</body>
</html>
