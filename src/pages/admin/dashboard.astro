---
// Advanced AI-Powered Admin Dashboard  
// Multi-client architecture with Supabase authentication
import Layout from '../../layouts/Layout.astro';
import AuthSystem from '../../components/AuthSystem.astro';
import ClientOnboarding from '../../components/ClientOnboarding.astro';
---

<Layout title="New Life Juice - AI Admin Dashboard">
    <style>
        /* Custom animations and gradients */
        @keyframes gradient {
            0%, 100% {
                background-size: 200% 200%;
                background-position: left center;
            }
            50% {
                background-size: 200% 200%;
                background-position: right center;
            }
        }
        
        .animate-gradient {
            animation: gradient 6s ease infinite;
        }
        
        .animate-pulse-slow {
            animation: pulse 3s cubic-bezier(0.4, 0, 0.6, 1) infinite;
        }
        
        .animate-bounce-slow {
            animation: bounce 2s infinite;
        }
    </style>

    <!-- FontAwesome -->
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <!-- Alpine.js -->
    <script src="https://unpkg.com/alpinejs@3.x.x/dist/cdn.min.js" defer></script>
    <script>
    // Alpine.js dashboard state
    function dashboardData() {
        return {
            // Dashboard stats
            stats: {
                ordersToday: 12,
                aiGenerations: 47,
                pageViews: 1234,
                revenue: 2856
            },
            // AI Content Generator
            quickPrompts: [
                { text: 'Write a product description for Green Detox' },
                { text: 'Create a social media post about juice benefits' },
                { text: 'Generate marketing copy for Tropical Paradise' }
            ],
            contentType: 'product-description',
            userPrompt: '',
            generating: false,
            generatedContent: '',
            generationHistory: [],
            showGenerationHistory: true,
            selectedGeneration: null,
            // Methods
            init() {
                // Load demo history if empty
                if (this.generationHistory.length === 0) {
                    this.generationHistory = [
                        {
                            id: 1,
                            type: 'product-description',
                            prompt: 'Write a product description for Green Detox',
                            content: 'Green Detox is a refreshing blend of kale, spinach, apple, and lemon. Packed with antioxidants and vitamins, it supports your body’s natural detox process and boosts energy.',
                            timestamp: Date.now() - 60000,
                            used: false
                        }
                    ];
                }
            },
            generateContent() {
                this.generating = true;
                setTimeout(() => {
                    // Simulate AI response
                    this.generatedContent = `Generated content for: ${this.userPrompt || this.quickPrompts[0].text}`;
                    this.generationHistory.unshift({
                        id: Date.now(),
                        type: this.contentType,
                        prompt: this.userPrompt,
                        content: this.generatedContent,
                        timestamp: Date.now(),
                        used: false
                    });
                    this.generating = false;
                }, 1200);
            },
            useQuickPrompt(promptObj) {
                this.userPrompt = promptObj.text;
            },
            copyToClipboard(content) {
                navigator.clipboard.writeText(content);
            },
            markAsUsed(generation) {
                if (generation) generation.used = true;
            },
            toggleGenerationHistory() {
                this.showGenerationHistory = !this.showGenerationHistory;
            },
            clearHistory() {
                this.generationHistory = [];
            },
            selectGeneration(generation) {
                this.selectedGeneration = generation;
            },
            deleteGeneration(id) {
                this.generationHistory = this.generationHistory.filter(g => g.id !== id);
            },
            formatDate(ts) {
                const d = new Date(ts);
                return d.toLocaleString();
            },
            getContentTypeBadge(type) {
                const map = {
                    'product-description': 'bg-purple-100 text-purple-700',
                    'marketing-copy': 'bg-blue-100 text-blue-700',
                    'social-media': 'bg-green-100 text-green-700',
                    'blog-post': 'bg-orange-100 text-orange-700',
                    'email-campaign': 'bg-yellow-100 text-yellow-700'
                };
                return map[type] || 'bg-gray-100 text-gray-700';
            }
        };
    }
    // Expose init for Alpine x-init
    function init() {}
    </script>

        <div class="bg-gray-50 min-h-screen">
        <!-- Supabase Authentication System -->
        <AuthSystem />

        <!-- Main Dashboard -->
        <div id="dashboard" class="hidden min-h-screen">
        <!-- Header -->
                <!-- Header -->
        <header class="bg-gradient-to-r from-green-600 via-blue-600 to-purple-600 shadow-lg">
            <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
                <div class="flex justify-between items-center py-6">
                    <div class="flex items-center space-x-4">
                        <div class="bg-white p-3 rounded-full shadow-md">
                            <i class="fas fa-leaf text-green-600 text-xl"></i>
                        </div>
                        <div>
                            <h1 class="text-2xl font-bold text-white flex items-center">
                                <i class="fas fa-magic text-yellow-300 mr-2 animate-pulse-slow"></i>
                                AI Admin Dashboard
                            </h1>
                            <p class="text-green-100 text-sm">Powered by OpenAI • Real-time Content Generation</p>
                        </div>
                        <span class="bg-white bg-opacity-20 text-white px-4 py-2 rounded-full text-sm font-medium backdrop-blur-sm">
                            <i class="fas fa-seedling mr-1"></i>
                            New Life Juice
                        </span>
                    </div>
                    
                    <div class="flex items-center space-x-4">
                        <!-- User Info -->
                        <div class="text-sm text-green-100 bg-white bg-opacity-10 px-4 py-2 rounded-lg backdrop-blur-sm">
                            <i class="fas fa-user mr-1"></i>
                            <span id="userDisplayName">Loading...</span>
                            <span class="text-xs opacity-75 block">
                                <span id="userRole">Admin</span> • 
                                <span id="clientName">New Life Juice</span>
                            </span>
                        </div>
                        
                        <!-- Session Info -->
                        <div class="text-sm text-green-100 bg-white bg-opacity-10 px-3 py-2 rounded-lg backdrop-blur-sm">
                            <i class="fas fa-clock mr-1"></i>
                            Last login: <span id="lastLogin">Just now</span>
                        </div>
                        
                        <!-- User Menu -->
                        <div class="relative" x-data="{ open: false }">
                            <button 
                                @click="open = !open"
                                class="bg-white bg-opacity-20 text-white px-4 py-2 rounded-lg hover:bg-opacity-30 transition-all duration-200 backdrop-blur-sm"
                            >
                                <i class="fas fa-user-circle mr-1"></i>
                                <i class="fas fa-chevron-down ml-1 text-xs"></i>
                            </button>
                            
                            <!-- Dropdown Menu -->
                            <div 
                                x-show="open" 
                                @click.away="open = false"
                                x-transition:enter="transition ease-out duration-100"
                                x-transition:enter-start="transform opacity-0 scale-95"
                                x-transition:enter-end="transform opacity-100 scale-100"
                                x-transition:leave="transition ease-in duration-75"
                                x-transition:leave-start="transform opacity-100 scale-100"
                                x-transition:leave-end="transform opacity-0 scale-95"
                                class="absolute right-0 mt-2 w-48 bg-white rounded-lg shadow-lg py-2 z-50"
                            >
                                <a href="#" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">
                                    <i class="fas fa-user mr-2"></i>Profile Settings
                                </a>
                                <a href="#" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">
                                    <i class="fas fa-cog mr-2"></i>Account Settings
                                </a>
                                <button 
                                    onclick="showOnboarding()"
                                    class="w-full text-left block px-4 py-2 text-sm text-blue-600 hover:bg-blue-50"
                                >
                                    <i class="fas fa-plus-circle mr-2"></i>Create New Business
                                </button>
                                <hr class="my-1">
                                <button 
                                    onclick="handleLogout()"
                                    class="w-full text-left block px-4 py-2 text-sm text-red-600 hover:bg-red-50"
                                >
                                    <i class="fas fa-sign-out-alt mr-2"></i>Sign Out
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </header>

        <!-- Main Content -->
        <main class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8" x-data="window.dashboardData()" x-init="init()">
            <!-- Quick Stats -->
            <div class="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
                <div class="bg-gradient-to-br from-green-50 to-green-100 p-6 rounded-xl shadow-lg border border-green-200 hover:shadow-xl transition-all duration-300">
                    <div class="flex items-center">
                        <div class="p-3 bg-green-500 rounded-full shadow-md">
                            <i class="fas fa-shopping-cart text-white text-lg"></i>
                        </div>
                        <div class="ml-4">
                            <p class="text-sm text-green-700 font-medium">Orders Today</p>
                            <p class="text-3xl font-bold text-green-800 animate-pulse-slow" x-text="stats.ordersToday">12</p>
                        </div>
                    </div>
                </div>
                
                <div class="bg-gradient-to-br from-blue-50 to-blue-100 p-6 rounded-xl shadow-lg border border-blue-200 hover:shadow-xl transition-all duration-300">
                    <div class="flex items-center">
                        <div class="p-3 bg-blue-500 rounded-full shadow-md">
                            <i class="fas fa-robot text-white text-lg"></i>
                        </div>
                        <div class="ml-4">
                            <p class="text-sm text-blue-700 font-medium">AI Generations</p>
                            <p class="text-3xl font-bold text-blue-800 animate-pulse-slow" x-text="stats.aiGenerations">47</p>
                        </div>
                    </div>
                </div>
                
                <div class="bg-gradient-to-br from-purple-50 to-purple-100 p-6 rounded-xl shadow-lg border border-purple-200 hover:shadow-xl transition-all duration-300">
                    <div class="flex items-center">
                        <div class="p-3 bg-purple-500 rounded-full shadow-md">
                            <i class="fas fa-eye text-white text-lg"></i>
                        </div>
                        <div class="ml-4">
                            <p class="text-sm text-purple-700 font-medium">Page Views</p>
                            <p class="text-3xl font-bold text-purple-800 animate-pulse-slow" x-text="stats.pageViews">1,234</p>
                        </div>
                    </div>
                </div>
                
                <div class="bg-gradient-to-br from-yellow-50 to-yellow-100 p-6 rounded-xl shadow-lg border border-yellow-200 hover:shadow-xl transition-all duration-300">
                    <div class="flex items-center">
                        <div class="p-3 bg-yellow-500 rounded-full shadow-md">
                            <i class="fas fa-dollar-sign text-white text-lg"></i>
                        </div>
                        <div class="ml-4">
                            <p class="text-sm text-yellow-700 font-medium">Revenue</p>
                            <p class="text-3xl font-bold text-yellow-800 animate-pulse-slow">$<span x-text="stats.revenue">2,856</span></p>
                        </div>
                    </div>
                </div>
            </div>

            <!-- AI Content Generator -->
            <div class="grid grid-cols-1 lg:grid-cols-2 gap-8 mb-8">
                <div class="bg-gradient-to-br from-white to-purple-50 p-8 rounded-xl shadow-xl border border-purple-100 hover:shadow-2xl transition-all duration-300">
                    <h3 class="text-xl font-bold text-gray-900 mb-6 flex items-center">
                        <div class="p-2 bg-gradient-to-r from-purple-500 to-blue-500 rounded-lg mr-3">
                            <i class="fas fa-magic text-white"></i>
                        </div>
                        AI Content Generator
                        <span class="ml-2 px-2 py-1 bg-purple-100 text-purple-700 text-xs rounded-full">LIVE</span>
                    </h3>
                    
                    <form @submit.prevent="generateContent()" class="space-y-4">
                        <!-- Quick Prompts -->
                        <div class="mb-4">
                            <label class="block text-sm font-medium text-gray-700 mb-2">Quick Prompts</label>
                            <div class="grid grid-cols-1 gap-2">
                                <template x-for="promptObj in quickPrompts" :key="promptObj.text">
                                    <button 
                                        type="button"
                                        @click="useQuickPrompt(promptObj)"
                                        class="text-left p-2 text-xs bg-gray-50 hover:bg-purple-50 rounded border hover:border-purple-200 transition-colors"
                                        x-text="promptObj.text"
                                    ></button>
                                </template>
                            </div>
                        </div>
                        
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">Content Type</label>
                            <select 
                                x-model="contentType"
                                class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500"
                            >
                                <option value="product-description">Product Description</option>
                                <option value="marketing-copy">Marketing Copy</option>
                                <option value="social-media">Social Media Post</option>
                                <option value="blog-post">Blog Post</option>
                                <option value="email-campaign">Email Campaign</option>
                            </select>
                        </div>
                        
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">Prompt</label>
                            <textarea 
                                x-model="userPrompt"
                                placeholder="Describe what you want to generate..."
                                class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 h-24"
                                required
                            ></textarea>
                        </div>
                        
                        <button 
                            type="submit"
                            class="w-full bg-gradient-to-r from-purple-600 to-blue-600 text-white py-3 rounded-lg hover:from-purple-700 hover:to-blue-700 transition-all font-semibold"
                            :disabled="generating"
                        >
                            <span x-show="!generating">
                                <i class="fas fa-wand-magic-sparkles mr-2"></i>
                                Generate Content
                            </span>
                            <span x-show="generating" class="flex items-center justify-center">
                                <i class="fas fa-spinner fa-spin mr-2"></i>
                                Generating...
                            </span>
                        </button>
                    </form>
                    
                    <div x-show="generatedContent" class="mt-6 p-6 bg-gradient-to-r from-green-50 to-blue-50 rounded-xl border border-green-200">
                        <h4 class="font-bold text-gray-800 mb-3 flex items-center">
                            <i class="fas fa-sparkles text-purple-600 mr-2"></i>
                            Generated Content:
                        </h4>
                        <div class="bg-white p-4 rounded-lg border border-gray-200 max-h-48 overflow-y-auto mb-4">
                            <p x-text="generatedContent" class="text-gray-700 whitespace-pre-wrap leading-relaxed"></p>
                        </div>
                        
                        <!-- Action buttons -->
                        <div class="flex flex-wrap gap-2">
                            <button 
                                @click="copyToClipboard(generatedContent)"
                                class="bg-gradient-to-r from-green-500 to-green-600 text-white px-4 py-2 rounded-lg hover:from-green-600 hover:to-green-700 transition-all duration-200 font-semibold shadow-lg text-sm"
                            >
                                <i class="fas fa-copy mr-1"></i>
                                Copy to Clipboard
                            </button>
                            
                            <button 
                                @click="markAsUsed(generationHistory[0])"
                                x-show="generationHistory.length > 0"
                                class="bg-gradient-to-r from-blue-500 to-blue-600 text-white px-4 py-2 rounded-lg hover:from-blue-600 hover:to-blue-700 transition-all duration-200 font-semibold shadow-lg text-sm"
                            >
                                <i class="fas fa-check mr-1"></i>
                                Mark as Used
                            </button>
                            
                            <button 
                                @click="userPrompt = ''; generatedContent = ''"
                                class="bg-gradient-to-r from-gray-500 to-gray-600 text-white px-4 py-2 rounded-lg hover:from-gray-600 hover:to-gray-700 transition-all duration-200 font-semibold shadow-lg text-sm"
                            >
                                <i class="fas fa-refresh mr-1"></i>
                                New Generation
                            </button>
                        </div>
                    </div>
                </div>

                <!-- AI Generation History -->
                <div class="bg-gradient-to-br from-white to-orange-50 p-8 rounded-xl shadow-xl border border-orange-100 hover:shadow-2xl transition-all duration-300">
                    <div class="flex justify-between items-center mb-6">
                        <h3 class="text-xl font-bold text-gray-900 flex items-center">
                            <div class="p-2 bg-gradient-to-r from-orange-500 to-yellow-500 rounded-lg mr-3">
                                <i class="fas fa-history text-white"></i>
                            </div>
                            Generation History
                            <span class="ml-2 px-2 py-1 bg-orange-100 text-orange-700 text-xs rounded-full" x-text="generationHistory.length"></span>
                        </h3>
                        
                        <div class="flex space-x-2">
                            <button 
                                @click="toggleGenerationHistory()"
                                class="bg-orange-500 text-white px-3 py-2 rounded-lg hover:bg-orange-600 transition-colors text-sm"
                            >
                                <i class="fas fa-list mr-1"></i>
                                <span x-text="showGenerationHistory ? 'Hide' : 'Show'"></span>
                            </button>
                            
                            <button 
                                @click="clearHistory()"
                                x-show="generationHistory.length > 0"
                                class="bg-red-500 text-white px-3 py-2 rounded-lg hover:bg-red-600 transition-colors text-sm"
                            >
                                <i class="fas fa-trash mr-1"></i>
                                Clear
                            </button>
                        </div>
                    </div>
                    
                    <!-- History List -->
                    <div x-show="showGenerationHistory" class="space-y-3 max-h-64 overflow-y-auto">
                        <template x-for="generation in generationHistory" :key="generation.id">
                            <div class="bg-white p-4 rounded-lg border shadow-sm hover:shadow-md transition-shadow">
                                <div class="flex justify-between items-start mb-2">
                                    <div class="flex items-center space-x-2">
                                        <span 
                                            class="px-2 py-1 text-xs rounded-full font-medium"
                                            :class="getContentTypeBadge(generation.type)"
                                            x-text="generation.type.replace('-', ' ').toUpperCase()"
                                        ></span>
                                        <span 
                                            x-show="generation.used"
                                            class="px-2 py-1 text-xs rounded-full bg-green-100 text-green-800 font-medium"
                                        >
                                            USED
                                        </span>
                                    </div>
                                    
                                    <div class="flex space-x-1">
                                        <button 
                                            @click="selectGeneration(generation)"
                                            class="text-blue-600 hover:text-blue-800 p-1"
                                            title="View Details"
                                        >
                                            <i class="fas fa-eye text-sm"></i>
                                        </button>
                                        <button 
                                            @click="copyToClipboard(generation.content)"
                                            class="text-green-600 hover:text-green-800 p-1"
                                            title="Copy Content"
                                        >
                                            <i class="fas fa-copy text-sm"></i>
                                        </button>
                                        <button 
                                            @click="deleteGeneration(generation.id)"
                                            class="text-red-600 hover:text-red-800 p-1"
                                            title="Delete"
                                        >
                                            <i class="fas fa-trash text-sm"></i>
                                        </button>
                                    </div>
                                </div>
                                
                                <p class="text-sm text-gray-600 mb-2 font-medium" x-text="generation.prompt"></p>
                                <p class="text-xs text-gray-500" x-text="formatDate(generation.timestamp)"></p>
                            </div>
                        </template>
                        
                        <div x-show="generationHistory.length === 0" class="text-center py-8 text-gray-500">
                            <i class="fas fa-robot text-3xl mb-2"></i>
                            <p>No AI generations yet. Create your first one!</p>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Quick Actions -->
            <div class="bg-white rounded-xl shadow-lg p-6 mb-8">
                <h3 class="text-lg font-bold text-gray-900 mb-6 flex items-center">
                    <i class="fas fa-lightning-bolt text-yellow-500 mr-2"></i>
                    Quick Actions
                </h3>
                
                <div class="grid grid-cols-2 md:grid-cols-4 gap-4">
                    <button onclick="openImageManager()" class="p-4 bg-blue-50 rounded-lg hover:bg-blue-100 transition-colors text-center">
                        <i class="fas fa-images text-blue-600 text-2xl mb-2"></i>
                        <p class="text-sm font-medium text-blue-800">Manage Images</p>
                    </button>
                    
                    <button class="p-4 bg-purple-50 rounded-lg hover:bg-purple-100 transition-colors text-center">
                        <i class="fas fa-chart-line text-purple-600 text-2xl mb-2"></i>
                        <p class="text-sm font-medium text-purple-800">View Analytics</p>
                    </button>
                    
                    <button class="p-4 bg-orange-50 rounded-lg hover:bg-orange-100 transition-colors text-center">
                        <i class="fas fa-cog text-orange-600 text-2xl mb-2"></i>
                        <p class="text-sm font-medium text-orange-800">Settings</p>
                    </button>
                    
                    <button onclick="openProductModal()" class="p-4 bg-green-50 rounded-lg hover:bg-green-100 transition-colors text-center">
                        <i class="fas fa-plus text-green-600 text-2xl mb-2"></i>
                        <p class="text-sm font-medium text-green-800">Add Product</p>
                    </button>
                </div>
            </div>

            <!-- Recent Activity -->
            <div class="bg-white rounded-lg shadow">
                <div class="p-6 border-b border-gray-200">
                    <h3 class="text-lg font-bold text-gray-900">
                        <i class="fas fa-clock text-gray-600 mr-2"></i>
                        Recent Activity
                    </h3>
                </div>
                
                <div class="p-6">
                    <div class="space-y-4">
                        <div class="flex items-center space-x-4 p-3 bg-green-50 rounded-lg">
                            <div class="p-2 bg-green-100 rounded-full">
                                <i class="fas fa-shopping-cart text-green-600"></i>
                            </div>
                            <div class="flex-1">
                                <p class="text-sm font-medium text-gray-900">New order received</p>
                                <p class="text-xs text-gray-600">5 Tropical Paradise juices - $90.00</p>
                            </div>
                            <span class="text-xs text-gray-500">2 min ago</span>
                        </div>
                        
                        <div class="flex items-center space-x-4 p-3 bg-blue-50 rounded-lg">
                            <div class="p-2 bg-blue-100 rounded-full">
                                <i class="fas fa-robot text-blue-600"></i>
                            </div>
                            <div class="flex-1">
                                <p class="text-sm font-medium text-gray-900">AI content generated</p>
                                <p class="text-xs text-gray-600">New product description for Green Detox</p>
                            </div>
                            <span class="text-xs text-gray-500">15 min ago</span>
                        </div>
                        
                        <div class="flex items-center space-x-4 p-3 bg-yellow-50 rounded-lg">
                            <div class="p-2 bg-yellow-100 rounded-full">
                                <i class="fas fa-user text-yellow-600"></i>
                            </div>
                            <div class="flex-1">
                                <p class="text-sm font-medium text-gray-900">New customer registration</p>
                                <p class="text-xs text-gray-600">sarah.johnson@email.com</p>
                            </div>
                            <span class="text-xs text-gray-500">1 hour ago</span>
                        </div>
                    </div>
                </div>
            </div>
        </main>
        
        <!-- Generation Details Modal -->
        <div 
            x-show="selectedGeneration" 
            x-transition:enter="transition ease-out duration-300"
            x-transition:enter-start="opacity-0"
            x-transition:enter-end="opacity-100"
            x-transition:leave="transition ease-in duration-200"
            x-transition:leave-start="opacity-100"
            x-transition:leave-end="opacity-0"
            class="fixed inset-0 bg-gray-900 bg-opacity-75 flex items-center justify-center z-50 p-4"
            @click.self="selectedGeneration = null"
        >
            <div class="bg-white rounded-xl shadow-2xl max-w-2xl w-full max-h-[90vh] overflow-hidden">
                <!-- Modal Header -->
                <div class="bg-gradient-to-r from-purple-600 to-blue-600 text-white p-6">
                    <div class="flex justify-between items-center">
                        <h3 class="text-xl font-bold flex items-center">
                            <i class="fas fa-robot mr-2"></i>
                            AI Generation Details
                        </h3>
                        <button 
                            @click="selectedGeneration = null"
                            class="text-white hover:text-gray-300 text-xl"
                        >
                            <i class="fas fa-times"></i>
                        </button>
                    </div>
                </div>
                
                <!-- Modal Content -->
                <div class="p-6 overflow-y-auto max-h-[calc(90vh-120px)]">
                    <template x-if="selectedGeneration">
                        <div class="space-y-4">
                            <!-- Generation Info -->
                            <div class="flex flex-wrap gap-2 mb-4">
                                <span 
                                    class="px-3 py-1 text-sm rounded-full font-medium"
                                    :class="getContentTypeBadge(selectedGeneration.type)"
                                    x-text="selectedGeneration.type.replace('-', ' ').toUpperCase()"
                                ></span>
                                <span 
                                    x-show="selectedGeneration.used"
                                    class="px-3 py-1 text-sm rounded-full bg-green-100 text-green-800 font-medium"
                                >
                                    USED
                                </span>
                                <span class="px-3 py-1 text-sm rounded-full bg-gray-100 text-gray-800 font-medium" x-text="formatDate(selectedGeneration.timestamp)"></span>
                            </div>
                            
                            <!-- Original Prompt -->
                            <div>
                                <h4 class="font-semibold text-gray-800 mb-2">Original Prompt:</h4>
                                <div class="bg-gray-50 p-3 rounded-lg">
                                    <p class="text-gray-700" x-text="selectedGeneration.prompt"></p>
                                </div>
                            </div>
                            
                            <!-- Generated Content -->
                            <div>
                                <h4 class="font-semibold text-gray-800 mb-2">Generated Content:</h4>
                                <div class="bg-white border border-gray-200 p-4 rounded-lg max-h-64 overflow-y-auto">
                                    <p class="text-gray-700 whitespace-pre-wrap leading-relaxed" x-text="selectedGeneration.content"></p>
                                </div>
                            </div>
                            
                            <!-- Actions -->
                            <div class="flex flex-wrap gap-2 pt-4 border-t">
                                <button 
                                    @click="copyToClipboard(selectedGeneration.content)"
                                    class="bg-green-500 text-white px-4 py-2 rounded-lg hover:bg-green-600 transition-colors"
                                >
                                    <i class="fas fa-copy mr-1"></i>
                                    Copy Content
                                </button>
                                
                                <button 
                                    @click="markAsUsed(selectedGeneration)"
                                    x-show="!selectedGeneration.used"
                                    class="bg-blue-500 text-white px-4 py-2 rounded-lg hover:bg-blue-600 transition-colors"
                                >
                                    <i class="fas fa-check mr-1"></i>
                                    Mark as Used
                                </button>
                                
                                <button 
                                    @click="deleteGeneration(selectedGeneration.id)"
                                    class="bg-red-500 text-white px-4 py-2 rounded-lg hover:bg-red-600 transition-colors"
                                >
                                    <i class="fas fa-trash mr-1"></i>
                                    Delete
                                </button>
                                
                                <button 
                                    @click="userPrompt = selectedGeneration.prompt; contentType = selectedGeneration.type; selectedGeneration = null"
                                    class="bg-purple-500 text-white px-4 py-2 rounded-lg hover:bg-purple-600 transition-colors"
                                >
                                    <i class="fas fa-redo mr-1"></i>
                                    Regenerate
                                </button>
                            </div>
                        </div>
                    </template>
                </div>
            </div>
        </div>
    </div>

    <script>
        // Alpine.js data - Define in global scope for static builds
        window.dashboardData = function() {
            return {
                contentType: 'product-description',
                userPrompt: '',
                generatedContent: '',
                generating: false,
                showGenerationHistory: false,
                generationHistory: JSON.parse(localStorage.getItem('aiGenerationHistory') || '[]'),
                selectedGeneration: null,
                stats: {
                    ordersToday: 12,
                    aiGenerations: JSON.parse(localStorage.getItem('aiGenerationHistory') || '[]').length,
                    pageViews: 1234,
                    revenue: 2856
                },
                
                // Quick prompts for common use cases
                quickPrompts: [
                    { type: 'product-description', text: 'Write a compelling product description for a healthy green juice blend' },
                    { type: 'marketing-copy', text: 'Create catchy hero section copy for a premium juice delivery service' },
                    { type: 'social-media', text: 'Write an engaging Instagram post about the benefits of cold-pressed juice' },
                    { type: 'email-campaign', text: 'Create a welcome email for new juice subscription customers' },
                    { type: 'blog-post', text: 'Write an introduction for a blog post about juice cleansing benefits' }
                ],
                
                // Initialize component
                init() {
                    this.stats.aiGenerations = this.generationHistory.length;
                },
                
                // Use quick prompt
                useQuickPrompt(promptObj) {
                    this.contentType = promptObj.type;
                    this.userPrompt = promptObj.text;
                },
                
                // Sanitize HTML content to prevent XSS
                sanitizeContent(content) {
                    const div = document.createElement('div');
                    div.textContent = content;
                    return div.innerHTML;
                },
                
                async generateContent() {
                    if (!this.userPrompt.trim()) {
                        alert('Please enter a prompt');
                        return;
                    }
                    
                    this.generating = true;
                    this.generatedContent = '';
                    
                    try {
                        const response = await fetch('/api/ai-assistant', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                            },
                            body: JSON.stringify({
                                prompt: this.userPrompt,
                                type: this.contentType,
                                adminPassword: localStorage.getItem('adminPassword')
                            })
                        });
                        
                        const data = await response.json();
                        
                        if (response.ok) {
                            const sanitizedContent = this.sanitizeContent(data.suggestion);
                            this.generatedContent = data.suggestion; // Keep original for display
                            
                            // Save to history
                            const generation = {
                                id: Date.now(),
                                prompt: this.userPrompt,
                                type: this.contentType,
                                content: data.suggestion,
                                sanitizedContent: sanitizedContent,
                                timestamp: new Date().toISOString(),
                                used: false
                            };
                            
                            this.generationHistory.unshift(generation);
                            localStorage.setItem('aiGenerationHistory', JSON.stringify(this.generationHistory));
                            this.stats.aiGenerations = this.generationHistory.length;
                            
                        } else {
                            alert('Error generating content: ' + data.error);
                        }
                    } catch (error) {
                        console.error('Error:', error);
                        alert('Error generating content. Please try again.');
                    } finally {
                        this.generating = false;
                    }
                },
                
                // Show generation history
                toggleGenerationHistory() {
                    this.showGenerationHistory = !this.showGenerationHistory;
                },
                
                // Select a generation for detailed view
                selectGeneration(generation) {
                    this.selectedGeneration = generation;
                },
                
                // Mark generation as used
                markAsUsed(generation) {
                    generation.used = true;
                    localStorage.setItem('aiGenerationHistory', JSON.stringify(this.generationHistory));
                    this.showSuccessToast('Marked as used!');
                },
                
                // Delete a generation
                deleteGeneration(generationId) {
                    if (confirm('Are you sure you want to delete this generation?')) {
                        this.generationHistory = this.generationHistory.filter(g => g.id !== generationId);
                        localStorage.setItem('aiGenerationHistory', JSON.stringify(this.generationHistory));
                        this.stats.aiGenerations = this.generationHistory.length;
                        this.selectedGeneration = null;
                        this.showSuccessToast('Generation deleted!');
                    }
                },
                
                // Clear all history
                clearHistory() {
                    if (confirm('Are you sure you want to clear all generation history?')) {
                        this.generationHistory = [];
                        localStorage.removeItem('aiGenerationHistory');
                        this.stats.aiGenerations = 0;
                        this.selectedGeneration = null;
                        this.showGenerationHistory = false;
                        this.showSuccessToast('History cleared!');
                    }
                },
                
                // Format date for display
                formatDate(isoString) {
                    return new Date(isoString).toLocaleString();
                },
                
                // Get content type badge color
                getContentTypeBadge(type) {
                    const badges = {
                        'product-description': 'bg-green-100 text-green-800',
                        'marketing-copy': 'bg-blue-100 text-blue-800',
                        'social-media': 'bg-purple-100 text-purple-800',
                        'blog-post': 'bg-yellow-100 text-yellow-800',
                        'email-campaign': 'bg-red-100 text-red-800'
                    };
                    return badges[type] || 'bg-gray-100 text-gray-800';
                },
                
                // Show success toast
                showSuccessToast(message) {
                    // Create and show a temporary toast notification
                    const toast = document.createElement('div');
                    toast.className = 'fixed top-4 right-4 bg-green-500 text-white px-6 py-3 rounded-lg shadow-lg z-50';
                    toast.innerHTML = `<i class="fas fa-check mr-2"></i>${message}`;
                    document.body.appendChild(toast);
                    
                    setTimeout(() => {
                        toast.remove();
                    }, 3000);
                },
                
                copyToClipboard(text) {
                    navigator.clipboard.writeText(text).then(() => {
                        // Show success feedback
                        const button = event.target;
                        const originalText = button.innerHTML;
                        button.innerHTML = '<i class="fas fa-check mr-1"></i>Copied!';
                        button.classList.add('bg-green-700');
                        
                        setTimeout(() => {
                            button.innerHTML = originalText;
                            button.classList.remove('bg-green-700');
                        }, 2000);
                    });
                }
            }
        }
        
        // Authentication functions - Global scope
        window.authenticate = async function() {
            const form = document.getElementById('authForm');
            const passwordInput = document.getElementById('adminPassword');
            const errorDiv = document.getElementById('authError');
            
            if (!form || form.hasListener) return; // Prevent multiple listeners
            
            form.hasListener = true; // Mark that listener is attached
            
            form.addEventListener('submit', async (e) => {
                e.preventDefault();
                
                const password = passwordInput.value;
                
                try {
                    // Test the password with a simple API call
                    const response = await fetch('/api/ai-assistant', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({
                            test: true,
                            adminPassword: password
                        })
                    });
                    
                    if (response.ok) {
                        // Store password and show dashboard
                        localStorage.setItem('adminPassword', password);
                        document.getElementById('authGuard').style.display = 'none';
                        document.getElementById('dashboard').classList.remove('hidden');
                        errorDiv.classList.add('hidden');
                    } else {
                        throw new Error('Invalid password');
                    }
                } catch (error) {
                    errorDiv.textContent = 'Invalid password. Please try again.';
                    errorDiv.classList.remove('hidden');
                    passwordInput.value = '';
                }
            });
        }
        
        window.logout = function() {
            localStorage.removeItem('adminPassword');
            location.reload();
        }
        
        // Check if already authenticated
        window.checkAuth = async function() {
            const savedPassword = localStorage.getItem('adminPassword');
            if (savedPassword) {
                // Don't test the password with API call on every load
                // Just show the dashboard if password exists
                document.getElementById('authGuard').style.display = 'none';
                document.getElementById('dashboard').classList.remove('hidden');
                return true;
            }
            return false;
        }

        // Image Manager Functions
        window.openImageManager = function() {
            document.getElementById('imageManagerModal').classList.remove('hidden');
            loadImages();
        }

        window.closeImageManager = function() {
            document.getElementById('imageManagerModal').classList.add('hidden');
        }

        window.handleImageUpload = async function(input) {
            const files = Array.from(input.files);
            if (files.length === 0) return;

            const progressDiv = document.getElementById('uploadProgress');
            const progressBar = document.getElementById('progressBar');
            progressDiv.classList.remove('hidden');

            let uploadedCount = 0;
            const totalFiles = files.length;

            for (const file of files) {
                try {
                    const formData = new FormData();
                    formData.append('file', file);
                    formData.append('category', 'products'); // Default category
                    
                    const userData = JSON.parse(localStorage.getItem('supabase_user') || '{}');
                    if (userData.id) {
                        formData.append('clientId', userData.id);
                    }

                    const response = await fetch('/api/image-upload', {
                        method: 'POST',
                        body: formData
                    });

                    if (response.ok) {
                        uploadedCount++;
                        const progress = (uploadedCount / totalFiles) * 100;
                        progressBar.style.width = progress + '%';
                    }
                } catch (error) {
                    console.error('Upload error:', error);
                }
            }

            // Hide progress and refresh images
            setTimeout(() => {
                progressDiv.classList.add('hidden');
                loadImages();
                alert(`${uploadedCount} images uploaded successfully!`);
            }, 1000);
        }

        window.loadImages = async function() {
            // TODO: Implement loading images from Supabase Storage
            const imagesGrid = document.getElementById('imagesGrid');
            imagesGrid.innerHTML = `
                <div class="text-center py-8 col-span-full text-gray-500">
                    <i class="fas fa-spinner fa-spin text-4xl mb-4"></i>
                    <p>Loading images...</p>
                </div>
            `;
            
            // Mock loading for now
            setTimeout(() => {
                imagesGrid.innerHTML = `
                    <div class="text-center py-8 col-span-full text-gray-500">
                        <i class="fas fa-images text-4xl mb-4"></i>
                        <p>Image management coming soon!</p>
                        <p class="text-sm mt-2">Upload functionality is working - check your Supabase Storage.</p>
                    </div>
                `;
            }, 1000);
        }

        window.filterImages = function(category) {
            // Update filter buttons
            document.querySelectorAll('.category-filter').forEach(btn => {
                btn.classList.remove('active', 'bg-blue-500', 'text-white');
                btn.classList.add('bg-gray-200', 'text-gray-700');
            });
            event.target.classList.remove('bg-gray-200', 'text-gray-700');
            event.target.classList.add('active', 'bg-blue-500', 'text-white');
            
            // TODO: Filter images by category
            loadImages();
        }

        // Product Modal Functions
        window.openProductModal = function() {
            document.getElementById('productModal').classList.remove('hidden');
        }

        window.closeProductModal = function() {
            document.getElementById('productModal').classList.add('hidden');
            document.getElementById('productForm').reset();
            document.getElementById('productImagePreview').classList.add('hidden');
        }

        window.selectImageFromManager = function() {
            // TODO: Open image selector
            alert('Image browser coming soon! For now, paste an image URL or upload via Image Manager.');
        }

        // Handle product form submission
        document.addEventListener('DOMContentLoaded', function() {
            const productForm = document.getElementById('productForm');
            if (productForm) {
                productForm.addEventListener('submit', async function(e) {
                    e.preventDefault();
                    
                    const formData = {
                        name: document.getElementById('productName').value,
                        price: parseFloat(document.getElementById('productPrice').value),
                        description: document.getElementById('productDescription').value,
                        category: document.getElementById('productCategory').value,
                        image_url: document.getElementById('productImageUrl').value,
                        is_active: document.getElementById('productStatus').value === 'active'
                    };

                    try {
                        const userData = JSON.parse(localStorage.getItem('supabase_user') || '{}');
                        
                        const response = await fetch('/api/product-catalog', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                            },
                            body: JSON.stringify({
                                action: 'create',
                                product: formData,
                                userId: userData.id
                            })
                        });

                        const result = await response.json();
                        
                        if (result.success) {
                            alert('Product created successfully!');
                            closeProductModal();
                            // TODO: Refresh products list
                        } else {
                            throw new Error(result.message || 'Failed to create product');
                        }
                    } catch (error) {
                        console.error('Product creation error:', error);
                        alert('Failed to create product: ' + error.message);
                    }
                });
            }

            // Image URL preview
            const imageUrlInput = document.getElementById('productImageUrl');
            if (imageUrlInput) {
                imageUrlInput.addEventListener('input', function() {
                    const url = this.value;
                    const preview = document.getElementById('productImagePreview');
                    const previewImg = document.getElementById('previewImg');
                    
                    if (url) {
                        previewImg.src = url;
                        preview.classList.remove('hidden');
                    } else {
                        preview.classList.add('hidden');
                    }
                });
            }
        });
        
        // Initialize when DOM is ready
        document.addEventListener('DOMContentLoaded', () => {
            // Check if user is already authenticated first
            const isAuthenticated = checkAuth();
            
            // Only initialize authentication form if not already authenticated
            if (!isAuthenticated) {
                authenticate();
            }
        });
    </script>
    </div>

    <!-- Image Manager Modal -->
    <div id="imageManagerModal" class="fixed inset-0 bg-black bg-opacity-50 hidden z-50 flex items-center justify-center p-4">
        <div class="bg-white rounded-xl shadow-2xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div class="flex justify-between items-center p-6 bg-gradient-to-r from-blue-600 to-purple-600 text-white">
                <h3 class="text-xl font-bold flex items-center">
                    <i class="fas fa-images mr-2"></i>Image Manager
                </h3>
                <button onclick="closeImageManager()" class="text-white hover:text-gray-300 text-xl">
                    <i class="fas fa-times"></i>
                </button>
            </div>
            
            <div class="p-6 overflow-y-auto max-h-[calc(90vh-120px)]">
                <!-- Upload Area -->
                <div class="border-2 border-dashed border-blue-300 rounded-lg p-8 text-center mb-6 bg-blue-50 hover:bg-blue-100 transition-colors cursor-pointer" 
                     onclick="document.getElementById('imageUpload').click()">
                    <i class="fas fa-cloud-upload-alt text-blue-500 text-4xl mb-4"></i>
                    <p class="text-lg font-semibold text-blue-700">Upload Images</p>
                    <p class="text-sm text-blue-600 mt-1">Click here or drag and drop images</p>
                    <p class="text-xs text-blue-500 mt-2">Supports: JPEG, PNG, WebP, GIF (Max: 10MB)</p>
                    <input type="file" id="imageUpload" accept="image/*" multiple style="display: none;" onchange="handleImageUpload(this)">
                </div>
                
                <!-- Category Filter -->
                <div class="flex space-x-4 mb-6">
                    <button onclick="filterImages('all')" class="category-filter active px-4 py-2 rounded-full bg-blue-500 text-white text-sm">All</button>
                    <button onclick="filterImages('products')" class="category-filter px-4 py-2 rounded-full bg-gray-200 text-gray-700 text-sm hover:bg-gray-300">Products</button>
                    <button onclick="filterImages('hero')" class="category-filter px-4 py-2 rounded-full bg-gray-200 text-gray-700 text-sm hover:bg-gray-300">Hero</button>
                    <button onclick="filterImages('general')" class="category-filter px-4 py-2 rounded-full bg-gray-200 text-gray-700 text-sm hover:bg-gray-300">General</button>
                </div>
                
                <!-- Images Grid -->
                <div id="imagesGrid" class="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4">
                    <!-- Images will be loaded here -->
                    <div class="text-center py-8 col-span-full text-gray-500">
                        <i class="fas fa-images text-4xl mb-4"></i>
                        <p>No images uploaded yet. Upload some images to get started!</p>
                    </div>
                </div>
                
                <!-- Upload Progress -->
                <div id="uploadProgress" class="hidden mt-6">
                    <div class="bg-blue-50 border border-blue-200 rounded-lg p-4">
                        <div class="flex items-center space-x-2">
                            <i class="fas fa-spinner fa-spin text-blue-500"></i>
                            <span class="text-blue-700 font-medium">Uploading images...</span>
                        </div>
                        <div class="mt-2 bg-blue-200 rounded-full h-2">
                            <div id="progressBar" class="bg-blue-500 h-2 rounded-full transition-all duration-300" style="width: 0%"></div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Product Add Modal -->
    <div id="productModal" class="fixed inset-0 bg-black bg-opacity-50 hidden z-50 flex items-center justify-center p-4">
        <div class="bg-white rounded-xl shadow-2xl max-w-2xl w-full max-h-[90vh] overflow-hidden">
            <div class="flex justify-between items-center p-6 bg-gradient-to-r from-green-600 to-blue-600 text-white">
                <h3 class="text-xl font-bold flex items-center">
                    <i class="fas fa-plus mr-2"></i>Add New Product
                </h3>
                <button onclick="closeProductModal()" class="text-white hover:text-gray-300 text-xl">
                    <i class="fas fa-times"></i>
                </button>
            </div>
            
            <form id="productForm" class="p-6 overflow-y-auto max-h-[calc(90vh-120px)] space-y-4">
                <div class="grid grid-cols-2 gap-4">
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-1">Product Name *</label>
                        <input type="text" id="productName" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-green-500 focus:border-green-500" placeholder="e.g., Green Detox">
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-1">Price *</label>
                        <input type="number" id="productPrice" step="0.01" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-green-500 focus:border-green-500" placeholder="18.00">
                    </div>
                </div>
                
                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-1">Description</label>
                    <textarea id="productDescription" rows="3" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-green-500 focus:border-green-500" placeholder="Describe your product..."></textarea>
                </div>
                
                <div class="grid grid-cols-2 gap-4">
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-1">Category</label>
                        <select id="productCategory" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-green-500 focus:border-green-500">
                            <option value="signature">Signature</option>
                            <option value="seasonal">Seasonal</option>
                            <option value="classic">Classic</option>
                            <option value="special">Special</option>
                        </select>
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-1">Status</label>
                        <select id="productStatus" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-green-500 focus:border-green-500">
                            <option value="active">Active</option>
                            <option value="inactive">Inactive</option>
                        </select>
                    </div>
                </div>
                
                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-1">Product Image</label>
                    <div class="flex space-x-4">
                        <input type="text" id="productImageUrl" class="flex-1 px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-green-500 focus:border-green-500" placeholder="Image URL or select from uploaded images">
                        <button type="button" onclick="selectImageFromManager()" class="px-4 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600">
                            <i class="fas fa-images mr-1"></i>Browse
                        </button>
                    </div>
                    <div id="productImagePreview" class="mt-2 hidden">
                        <img id="previewImg" class="w-32 h-24 object-cover rounded-md border border-gray-200" alt="Preview">
                    </div>
                </div>
                
                <div class="flex justify-between pt-6 border-t">
                    <button type="button" onclick="closeProductModal()" class="px-6 py-2 text-gray-600 hover:text-gray-800">Cancel</button>
                    <button type="submit" class="px-6 py-2 bg-green-500 text-white rounded-lg hover:bg-green-600 flex items-center">
                        <i class="fas fa-plus mr-2"></i>Create Product
                    </button>
                </div>
            </form>
        </div>
    </div>

    <!-- Client Onboarding Modal -->
    <ClientOnboarding />
</Layout>
